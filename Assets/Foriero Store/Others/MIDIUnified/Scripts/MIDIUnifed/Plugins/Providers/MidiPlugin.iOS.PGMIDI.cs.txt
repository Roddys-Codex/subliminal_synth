/* Copyright Â© Marek Ledvina, Foriero s.r.o. */
#if UNITY_IOS && !UNITY_EDITOR

using UnityEngine;
using System;
using System.Runtime.InteropServices;

namespace ForieroEngine.MIDIUnified.Plugins
{
	internal class MidiINDeviceIOS: IMidiINDevice
	{

#region external

		[DllImport ("__Internal")] private static extern int MidiIn_PortOpen (int i);
		[DllImport ("__Internal")] private static extern void MidiIn_PortClose (int deviceId);
		[DllImport ("__Internal")] private static extern void MidiIn_PortCloseAll ();
		[DllImport ("__Internal")] private static extern string MidiIn_PortName (int i);
		[DllImport ("__Internal")] private static extern int MidiIn_PortCount ();
		[DllImport ("__Internal")] public static extern bool MidiIn_PortAdded ();
		[DllImport ("__Internal")] public static extern bool MidiIn_PortRemoved ();
		[DllImport ("__Internal")] private static extern int MidiIn_PopMessage (out NativeMidiMessage packet);
        [DllImport ("__Internal")] private static extern int MidiIn_DeleteData (IntPtr midiMessage);
        //[DllImport ("__Internal")]
		//public static extern void EnableNetwork(bool enabled);

#endregion

#region implementation

		public bool Init(){ return true; }

		public int ConnectDevice (int deviceIndex, bool editor = false) => MidiIn_PortOpen (deviceIndex);
		public void DisconnectDevice (int deviceId, bool editor = false) => MidiIn_PortClose (deviceId);
		public void DisconnectDevices (bool editor = false) => MidiIn_PortCloseAll ();
		public string GetDeviceName (int deviceIndex) => MidiIn_PortName (deviceIndex);
		public int GetDeviceCount () => MidiIn_PortCount ();
		public int OpenVirtualPort(string name, bool editor = false) => 0;
		public void CloseVirtualPort(int deviceId, bool editor = false) { }
        public void CloseVirtualPorts(bool editor = false) { }
        public int GetVirtualPortCount() => 0;
        public string GetVirtualPortName(int portIndex) => "";

        public int PopMessage (out MidiMessage midiMessage, bool editor = false)
		{
            midiMessage = new MidiMessage();
            var result = MidiIn_PopMessage(out var m);
            midiMessage.CopyData(m);
			m.Time = AudioSettings.dspTime;
            DeleteData(m.data);
            return result;
		}

        private void DeleteData(IntPtr data) { if(data != IntPtr.Zero) MidiIn_DeleteData(data); }

#endregion

	}

	internal class MidiOUTDeviceIOS: IMidiOUTDevice
	{

#region external

		[DllImport ("__Internal")] private static extern int MidiOut_PortOpen (int i);
		[DllImport ("__Internal")] private static extern void MidiOut_PortClose (int deviceId);
		[DllImport ("__Internal")] private static extern void MidiOut_PortCloseAll ();
		[DllImport ("__Internal")] private static extern string MidiOut_PortName (int i);
		[DllImport ("__Internal")] private static extern int MidiOut_PortCount ();
		[DllImport ("__Internal")] private static extern int MidiOut_SendMessage (int Command, int Data1, int Data2, int DeviceId);
		[DllImport ("__Internal")] private static extern int MidiOut_SendData (byte[] Data, int DataSize, int DeviceId);
		[DllImport ("__Internal")] public static extern bool MidiOut_PortAdded ();
		[DllImport ("__Internal")] public static extern bool MidiOut_PortRemoved ();
		[DllImport ("__Internal")] public static extern void EnableNetwork (bool enabled);
		
#endregion

#region implementation

		public bool Init(){ return true; }
		public int ConnectDevice (int deviceIndex, bool editor = false) => MidiOut_PortOpen (deviceIndex);
		public void DisconnectDevice (int deviceId, bool editor = false) => MidiOut_PortClose (deviceId);
		public void DisconnectDevices (bool editor = false) => MidiOut_PortCloseAll ();
		public string GetDeviceName (int deviceIndex) => MidiOut_PortName (deviceIndex);
		public int GetDeviceCount () => MidiOut_PortCount ();
		public int OpenVirtualPort(string name, bool editor = false) => 0;
		public void CloseVirtualPort(int deviceId, bool editor = false) { }
        public void CloseVirtualPorts(bool editor = false) { }
        public int GetVirtualPortCount() => 0;
        public string GetVirtualPortName(int portIndex) => "";
        public int SendMessage (byte command, byte data1, byte data2, int deviceId = -1, bool editor = false) => MidiOut_SendMessage (command, data1, data2, deviceId);
        public int SendData (byte[] data, int deviceId = -1, bool editor = false) => MidiOut_SendData (data, data.Length, deviceId);

#endregion

	}
}

#endif
